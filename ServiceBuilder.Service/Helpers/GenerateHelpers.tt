<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Data" #> 
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data.SqlClient" #> 
<#@ import namespace="System.Data" #> 
<#@ import namespace="System.IO" #> 
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>

<#@ assembly name="%MODELDLL%" #>

<#@ output extension=".txt" #> 
<#@ include file="MultiOutput.tt" #>

<# SaveOutput("GenerateHelpers.txt");#>

<# GenerateHelpers(); #>


<# DeleteOldOutputs(); #>

<#+
void GenerateHelpers()
{
	
	string solutionName = GetSolutionName();
	string nameSpace = solutionName + ".Model";
	List<CodeClass> classes = FindClasses(nameSpace, "", null);

    foreach(var _class in classes) 
    { 
		string name = _class.Name;
		if (name != "__MigrationHistory" && name != solutionName + "Context")
        {
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using <#= solutionName #>.Model;
using <#= solutionName #>.Repository;

namespace <#= solutionName #>.Service.Helpers
{
    public class <#= name #>Helper : I<#= name #>Helper
    {
        internal I<#= solutionName #>Repository repo;

        public <#= name #>Helper(I<#= solutionName #>Repository repo)
        {
            this.repo = repo;
        }
        
        #region CREATE

        /// <summary>
        /// Creates a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was created in the database.</returns>
        public <#= name #> Create<#= name #>(<#= name #> entity)
        {
            try
            {
                return repo.Create<<#= name #>>(entity);
            }
            catch (Exception ex)
            {
                repo.LogError(ex);
                throw ex;
            }
        }
		
		#endregion

		#region GET

		/// <summary>
        /// Gets a list of all <#= name #>s.
        /// </summary>
        /// <returns>Returns all the <#= name #>s in the database.</returns>
        public IEnumerable<<#= name #>> Get<#= name #>s()
        {
            try
            {
                return repo.All<<#= name #>>().AsEnumerable();
            }
            catch (Exception ex)
            {
                repo.LogError(ex);
                throw ex;
            }
        }

<#+
		var properties = GetProperties(_class);
		//HACK: primary key not necessarily the first property, should change this later
		var primaryKey = properties[0];
		string primaryKeyParam = Char.ToLowerInvariant(primaryKey.Name[0]) + primaryKey.Name.Substring(1);
		foreach (CodeProperty property in properties)
        {
			if (!property.Type.AsString.Contains("ICollection"))
            {
				var propName = property.Name;
				string parameter = Char.ToLowerInvariant(propName[0]) + propName.Substring(1);
#>

        /// <summary>
        /// Gets a/an <#= name #> by <#= propName #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was found with matching <#= propName #>.</returns>
        public <#= name #> Get<#= name #>By<#= propName #>(<#=property.Type.AsString#> <#=parameter#>)
        {
            try
            {
                return repo.Single<<#= name #>>(e => e.<#= propName #> == <#=parameter#>);
            }
            catch (Exception ex)
            {
                repo.LogError(ex);
                throw ex;
            }
        }

<#+
			}
		}
#>

		#endregion
		
		#region UPDATE

        /// <summary>
        /// Updates a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was updated in the database.</returns>
        public <#= name #> Update<#= name #>(<#= name #> entity)
        {
            try
            {
                return repo.Update<<#= name #>>(entity);
            }
            catch (Exception ex)
            {
                repo.LogError(ex);
                throw ex;
            }
        }

		#endregion
		
		#region DELETE

        /// <summary>
        /// Deletes a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns an int for the result.</returns>
        public int Delete<#= name #>By<#= primaryKey.Name #>(<#=primaryKey.Type.AsString#> <#=primaryKeyParam#>)
        {
            try
            {
			    var entity = Get<#= name #>By<#= primaryKey.Name #>(<#=primaryKeyParam#>);
                return repo.Delete<<#= name #>>(entity);
            }
            catch (Exception ex)
            {
                repo.LogError(ex);
                throw ex;
            }
        }

		#endregion
	}
}
<#+  
    string fileName = name + "Helper.cs";
	SaveOutput(fileName);
#>
	  
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using <#= solutionName #>.Model;
using <#= solutionName #>.Repository;

namespace <#= solutionName #>.Service.Helpers
{
    public interface I<#= name #>Helper
    {
        /// <summary>
        /// Creates a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was created in the database.</returns>
        <#= name #> Create<#= name #>(<#= name #> entity);
		

		/// <summary>
        /// Gets a list of all <#= name #>s.
        /// </summary>
        /// <returns>Returns all the <#= name #>s in the database.</returns>
        IEnumerable<<#= name #>> Get<#= name #>s();
		<#+
		foreach (CodeProperty property in properties)
        {
			if (!property.Type.AsString.Contains("ICollection"))
            {
				var propName = property.Name;
				string parameter = Char.ToLowerInvariant(propName[0]) + propName.Substring(1);
#>

        /// <summary>
        /// Gets a/an <#= name #> by <#= propName #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was found with matching <#= propName #>.</returns>
        <#= name #> Get<#= name #>By<#= propName #>(<#=property.Type.AsString#> <#=parameter#>);

<#+
			}
		}
#>
		/// <summary>
        /// Updates a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns the <#= name #> that was updated in the database.</returns>
        <#= name #> Update<#= name #>(<#= name #> entity);
		
		/// <summary>
        /// Deletes a/an <#= name #>.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns>Returns an int for the result.</returns>
        int Delete<#= name #>By<#= primaryKey.Name #>(<#=primaryKey.Type.AsString#> <#=primaryKeyParam#>);
	}
}

<#+  
    fileName = "I" + fileName;
	SaveOutput(fileName);
#>

<#+   
        }
    }  
#>

<#+
}
#>

<#+ 
string GetSolutionName()
{
    IServiceProvider hostServiceProvider = (IServiceProvider)Host;
    if (hostServiceProvider == null)
        throw new Exception("Host property returned unexpected value (null)");

    EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    if (dte == null)
        throw new Exception("Unable to retrieve EnvDTE.DTE");

    var solutionName = Path.GetFileNameWithoutExtension(dte.Solution.FullName);
	return solutionName;
}

private List<CodeClass> FindClasses(string nameSpace, string className, string baseClassName)
{
    List<CodeClass> result=new List<CodeClass>();
    FindClasses(__getTemplateProject().CodeModel.CodeElements,className,baseClassName,nameSpace,result,false);
    return result;

}

private void FindClasses(CodeElements elements, string className,string baseClassName,string searchNamespace,List<CodeClass> result,bool isNamespaceOk)
{
    if (elements==null)return;
    foreach (CodeElement element in elements)
    {       
        if(element is CodeNamespace)
        {
            CodeNamespace ns = element as CodeNamespace;
			//MessageBox.Show(ns.FullName);
            if(ns != null)
            {
                if (ns.FullName == searchNamespace)
                    FindClasses(ns.Members, className,baseClassName,searchNamespace,result,true);
                else
                    FindClasses(ns.Members, className,baseClassName,searchNamespace,result,false);
            }
        }
        else if(element is CodeClass && isNamespaceOk)
        {
            CodeClass c = element as CodeClass;
            if (c != null)
            {
				//WriteToOutput(c.FullName);
				//MessageBox.Show(c.FullName);
                if(c.FullName.Contains(className) && (baseClassName==null || (HasIt(c.Bases ,baseClassName) && c.Name != baseClassName)))
                    result.Add(c);

                FindClasses(c.Members, className,baseClassName,searchNamespace,result,true);
            }

        }
    }
}

private List<CodeProperty> GetProperties(CodeClass _class)
{
	List<CodeProperty> properties = new List<CodeProperty>();
	var elements = _class.Members;
	foreach (CodeElement element in elements)
    {
		if(element is CodeProperty)
		{
			CodeProperty prop = element as CodeProperty;
			properties.Add(prop);
		}
    }
	return properties;
}

private List<CodeFunction> GetMethods(CodeClass _class)
{
	List<CodeFunction> functions = new List<CodeFunction>();
	var elements = _class.Members;
	foreach (CodeElement element in elements)
    {
		if(element is CodeFunction)
		{
			CodeFunction func = element as CodeFunction;
			functions.Add(func);
		}
    }
	return functions;
}

private List<CodeParameter> GetParameters(CodeFunction function)
{
	List<CodeParameter> parameters = new List<CodeParameter>();
	var elements = function.Parameters;
	foreach (CodeElement element in elements)
    {
		if(element is CodeParameter)
		{
			CodeParameter param = element as CodeParameter;
			parameters.Add(param);
		}
    }
	return parameters;
}

private bool HasIt(CodeElements elements,string name)
{
    foreach (CodeElement element in elements)
    {
        if (element.Name==name)
            return true;
    }
    return false;
}

private void WriteToOutput(string output)
{
	IServiceProvider hostServiceProvider = (IServiceProvider)Host;
    if (hostServiceProvider == null)
        throw new Exception("Host property returned unexpected value (null)");

    EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    if (dte == null)
        throw new Exception("Unable to retrieve EnvDTE.DTE");

	var window = dte.Windows.Item(EnvDTE.Constants.vsWindowKindOutput);
	var outputWindow = (OutputWindow) window.Object;
	outputWindow.ActivePane.Activate();

	outputWindow.ActivePane.OutputString(output);
	outputWindow.ActivePane.OutputString("\n");
}

#>